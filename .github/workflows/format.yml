name: continuous auto-formatting

on: [pull_request, push]

jobs:
  get_input:
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.abc.outputs.value }}

    steps:
      - uses: actions/checkout@v2
      - uses: jitterbit/get-changed-files@v1
        id: abc
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Print modified files
        run: |
          file=${{ steps.abc.outputs.all }}
          echo "$file"
          declare -a MODIFIED_FILES=()
          while IFS=" " read -r file; do 
            MODIFIED_FILES+=file
          done
          echo ${MODIFIED_FILES[*]}
          echo "::set-output name=value::${MODIFIED_FILES[*]}"
          if: false
          - run: echo $try
          env:
            try: ${{ steps.outputs.value && fromJSON(steps.outputs.value) }}
          if: false

  autopep8_format:
    #Checks if PR is not from a fork. Avoids Action failure because if PR comes from another repo, it cannot access repo secret.
    #if: github.event.pull_request.head.repo.full_name == github.repository
    needs: get_input
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      Modified: ${{fromJson(needs.get_input.outputs.value)}}

    steps:
      - run: echo "An auto-formatting action is being triggered by a ${{ github.event_name }} event."
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"

      - name: Install Prereqs
        id: command_line_outputs
        run: |
          python -m pip install --upgrade pip
          pip install autopep8
          echo "Printing modified files:"
          echo ${{needs.get_input.outputs.value}}
          cd ${{ github.workspace }}

      - name: Run Python Script
        uses: jannekem/run-python-script-action@v1
        id: script
        with:
          fail-on-error: false
          script: |
            import autopep8
            import os
            print(os.environ['Modified'])
            for root, _, files in os.walk(os.getcwd()):
              path = root + os.path.sep
              for file in files:
                if file.endswith(".py"):
                  texts = []
                  with open(os.path.join(path, file), mode='r', encoding='UTF-8') as f1:
                    texts = f1.read()
                  with open(os.path.join(path, file), mode='w', encoding='UTF-8') as f2:
                    texts = autopep8.fix_code(texts)
                    f2.write(f'{texts}\n')

      - name: Print errors
        if: steps.script.outputs.error == 'true'
        run: |
          printenv "SCRIPT_STDOUT"
          printenv "SCRIPT_STDERR"
        env:
          SCRIPT_STDOUT: ${{ steps.script.outputs.stdout }}
          SCRIPT_STDERR: ${{ steps.script.outputs.stderr }}

      - name: Check Modified Files
        id: git-check
        run: echo ::set-output name=modified::$(if git diff --quiet; then echo "false"; else echo "true"; fi)

      - name: Push Change
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name 'Beckham Pan' 
          git config --global user.email 'beckham.0831@yahoo.com.tw' 
          git remote set-url origin https://x-access-token:${{ secrets.SECRET_TOKEN }}@github.com/${{ github.repository }}
          git commit -a -m "Automated (PEP8 Formatting) changes" 
          git push

      - name: All Good
        # Consider case where no file formatting is needed
        if: steps.git-check.outputs.modified == 'false'
        run: echo "No code formatting needed. You write Python in perfect format :)"

  # check job1 status. If not successfull, do something.
  # check_job:
  #   needs: autopep8_format
  #   runs-on: ubuntu-latest
  #   if: needs.autopep8_format.result == "skipped" || needs.autopep8_format.result == "failure"
  #   steps:
